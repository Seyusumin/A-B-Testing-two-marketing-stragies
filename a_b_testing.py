# -*- coding: utf-8 -*-
"""A/B Testing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sh9HubD93vzg-W6o9ZL3Sxg3vw9oAvxf
"""

import pandas as pd
import datetime
from datetime import date, timedelta
import plotly.graph_objects as go
import plotly.express as px
import plotly.io as pio
pio.templates.default = "plotly_white"

control_data = pd.read_csv("control_group.csv", sep = ";")
test_data = pd.read_csv("test_group.csv", sep = ";")
#cargamos las librerias y los data sets

#echamos un vistaso a los datasets
print(control_data.head())

print(test_data.head())

#les damos nombres nuevos a las columnas

control_data.columns = ["Campaign Name", "Date", "Amount Spent", "Number of Impressions", "Reach", "Website Clicks", 
                       "Searches Received", "Content Viewed", "Added to Cart", "Purchases"]

test_data.columns = ["Campaign Name", "Date", "Amount Spent", 
                        "Number of Impressions", "Reach", "Website Clicks", 
                        "Searches Received", "Content Viewed", "Added to Cart",
                        "Purchases"]

#checamos si los datasets tienen valores nulos o no

print(control_data.isnull().sum())

print(test_data.isnull().sum())

#el dataset de control campaing tiene valores faltantes en una columna, 
#vamos a rellenar estos valores con el valor medio de cada columna

control_data["Number of Impressions"].fillna(value=control_data["Number of Impressions"].mean(),
                                             inplace=True)
control_data["Reach"].fillna(value=control_data["Reach"].mean(), 
                             inplace=True)
control_data["Website Clicks"].fillna(value=control_data["Website Clicks"].mean(), 
                                      inplace=True)
control_data["Searches Received"].fillna(value=control_data["Searches Received"].mean(), 
                                         inplace=True)
control_data["Content Viewed"].fillna(value=control_data["Content Viewed"].mean(), 
                                      inplace=True)
control_data["Added to Cart"].fillna(value=control_data["Added to Cart"].mean(), 
                                     inplace=True)
control_data["Purchases"].fillna(value=control_data["Purchases"].mean(), 
                                 inplace=True)

# vamos a crear un nuevo dataset con ambos dataset

ab_data = control_data.merge(test_data, how="outer").sort_values(["Date"])
ab_data = ab_data.reset_index(drop=True)
print(ab_data.head())

print(ab_data["Campaign Name"].value_counts())

# Ahora que ya tenemos el data hay que empezar con analizar la relacion entre 
# las 2 campañas y el presupuesto en ambas campañas

figure = px.scatter(data_frame = ab_data, 
                    x="Number of Impressions",
                    y="Amount Spent",
                    size="Amount Spent",
                    color= "Campaign Name",
                    trendline="ols")
figure.show()

#veamos las busquedas realizadas en el sitio web de ambas campañas

label = ["Total Searches from Control Campaign",
         "Total Searches from Test Campaign"]
counts = [sum(control_data["Searches Received"]),
          sum(test_data["Searches Received"])]
colors = ["gold","ligthgreen"]
fig = go.Figure(data=[go.Pie(labels=label, values=counts)])
fig.update_layout(title_text="Control Vs Test: Searches")
fig.update_traces(hoverinfo="label+percent", textinfo="value",
                  textfont_size=30,
                  marker=dict(colors=colors,
                              line=dict(color="black", width=3)))
fig.show()

#vamos a ver el numero de cicks en la pagina web de ambas campañas

from ipywidgets.widgets.widget_int import Color
label = ["Website Clicks from Control Campaign",
         "Website Clicls from Test Campaign"]
counts = [sum(control_data["Website Clicks"]),
          sum(test_data["Website Clicks"])]
colors = ["pink","chocolate"]
fig = go.Figure(data=[go.Pie(labels=label, values=counts)])
fig.update_layout(title_text="Control Vs Test: Website Clicks")
fig.update_traces(hoverinfo="label+percent", textinfo="value",
                  textfont_size=30,
                  marker=dict(colors=colors,
                              line=dict(color="black", width=3)))
fig.show()

#vamos a ver el numero de contenido visto despues de buscar el sitio web de ambas campañas

label = ["Content Viewed from Contorl Campaign",
         "Content Viewed from Test Campaign"]
counts = [sum(control_data["Content Viewed"]),
          sum(test_data["Content Viewed"])]
colors = ["blueviolet","burlywood"]
fig = go.Figure(data=[go.Pie(labels=label, values=counts)])
fig.update_layout(title_text="Control Vs Test: Content Viewed")
fig.update_traces(hoverinfo="label+percent", textinfo="value",
                  textfont_size=30,
                  marker=dict(colors=colors,
                              line=dict(color="black", width=3)))
fig.show()

# La audiencia de la campaña de control vieron mas contenido que los de la campaña test 
# sin embargo no hay mucha diferencia aunque los cicks de la campaña de control fueron bajos
# su engagement en la paginaweb es mas alto que el de la campaña de test

#vamos a ver el numero de productos añadidos al carrito de ambas campañas

label = ["Products Added to Cart from Control Campaign",
         "Products Added to Cart from Test Campaign"]
counts = [sum(control_data["Added to Cart"]),
          sum(test_data["Added to Cart"])]
colors = ["cornflowerblue","darkolivegreen"]
fig = go.Figure(data=[go.Pie(labels=label, values=counts)])
fig.update_layout(title_text="Control Vs Test: Added to Cart")
fig.update_traces(hoverinfo="label+percent", textinfo="value",
                  textfont_size=30,
                  marker=dict(colors=colors,
                              line=dict(color="black", width=3)))

# A pesar de los pocos clics en la pagina web se agregaron mas productos al carrito
# en la campaña control.
# vamos a ver el presupuesto gastado en ambas campañas

label = ["Amount Spent in Control Campaign",
         "Amount Spent in Test Campaign"]
counts = [sum(control_data["Amount Spent"]),
          sum(test_data["Amount Spent"])]
colors = ["forestgreen","firebrick"]
fig = go.Figure(data=[go.Pie(labels=label, values=counts)])
fig.update_layout(title_text="Control Vs Test: Amount Spent")
fig.update_traces(hoverinfo="label+percent", textinfo="value",
                  textfont_size=30,
                  marker=dict(colors=colors,
                              line=dict(color="black", width=3)))
fig.show()

# El monto gastado en la campaña test es mayor que el de la campaña control, pero como podemos ver
# la campaña control resulta en mas contenido de vistas y mas productos añadidos al carrito,
# la campaña control es mas eficiente que la campaña test.

# Vamos a ver las ganancias de ambas campañas

label = ["Purchases Made by Control Campaign",
         "Purchases Made by Test Campaign"]
counts = [sum(control_data["Purchases"]),
          sum(test_data["Purchases"])]
colors = ["indianred", "plum"]
fig = go.Figure(data=[go.Pie(labels=label, values=counts)])
fig.update_layout(title_text="Control Vs Test: Purchases")
fig.update_traces(hoverinfo="label+percent", textinfo="value",
                  textfont_size=30,
                  marker=dict(colors=colors,
                              line=dict(color="black", width=3)))
fig.show()

# Hay una diferencia aproximada del 1 % en las ganancias de las 2 campañas
# como la campaña de control tiene mas ventas y menos presupuesto en marketing,
# la campaña de control es la ganadora en esto.

# Ahora analizemos algunas metricas para encontrar cual campaña convierte mas,
# primero se vera la relacion entre el nummero de clcks en el sitio web y el contenido visto en ambas campañas

figure = px.scatter(data_frame = ab_data,
                    x="Content Viewed",
                    y="Website Clicks",
                    size="Website Clicks",
                    color= "Campaign Name",
                    trendline="ols")
figure.show()

# Los click en la pagina web son mayores en la campaña test pero el enggement de los clicks en la pagina
# es mas alto en la campaña control.
# Ahora analizemos la relacion entre la cantidad de contenido vistoy la cantidad de
# productos agregados al carrito de ambas campañas

figure = px.scatter(data_frame = ab_data,
                    x="Added to Cart",
                    y="Content Viewed",
                    size="Added to Cart",
                    color="Campaign Name",
                    trendline="ols")
figure.show()

# Nuevamente la campaña de Control es mejor.
# Ahora hay que ver la relacion entre el numero de productos añadidos al carrito
# y el numero de ventas de ambas campañas

figure = px.scatter(data_frame = ab_data,
                    x="Purchases",
                    y="Added to Cart",
                    size="Purchases",
                    color="Campaign Name",
                    trendline="ols")
figure.show()

# Aunque  la campaña de control resulto en mas ventas y mas productos en el carrito,
# el numero de conversion de la campaña test es mayor.

#Conclusiones: